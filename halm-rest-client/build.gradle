/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext.projectName = rootProject.name
ext.projectGroup = "com.perforce.halm.rest"
ext.projectDescription = "Helix ALM REST API Client"
ext.projectVersion = currentVersion
ext.projectURL = 'https://github.com/perforce/helix-alm-rest-client'
ext.projectSCM = 'scm:git:git://github.com/perforce/helix-alm-rest-client.git'
ext.projectLicense = 'https://github.com/perforce/helix-alm-rest-client/blob/main/LICENSE.txt'
ext.developerID = 'vincenpt'
ext.developerName = 'Paul Vincent'
ext.developerEmail = 'pvincent@perforce.com'

allprojects {
    archivesBaseName = projectName
    group = projectGroup
    version = projectVersion
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // REST API Helper
    api 'io.github.openfeign:feign-gson:12.4'
    api 'io.github.openfeign:feign-okhttp:11.8'

    // HTTP Client for the REST API helper
    api 'com.squareup.okhttp3:okhttp:4.10.0'
    api 'com.squareup.okhttp3:okhttp-tls:4.10.0'

    // Common utility functions
    api 'commons-codec:commons-codec:1.15'
    api 'commons-io:commons-io:2.8.0'

}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

def test = tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform() {
        excludeTags "integration"
    }
}

tasks.register("integrationTest", Test) {
    group "verification"

    useJUnitPlatform {
        includeTags "integration"
    }
    shouldRunAfter test
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

javadocJar {
    classifier = 'javadoc'
    from javadoc
}

sourcesJar {
    exclude('.MySCMServerInfo')

    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    // Only signing if we are publishing. This keeps us from needing everyday developers to keep the signing keys
    // on their work desktops.
    required { gradle.taskGraph.hasTask("publish") }

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign configurations.archives
    sign publishing.publications
}

publishing {
    repositories {
        if (isReleaseVersion) {
            // Only try to publish to the release staging if this is a release build
            maven {
                name = "ossrh"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = findProperty('ossrhUsername')
                    password = findProperty('ossrhPassword')
                }
            }

        } else {
            // Only try to publish to 'snapshots' if this IS a snapshot build.
            maven {
                name = "ossrhSnapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = findProperty('ossrhUsername')
                    password = findProperty('ossrhPassword')
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = projectName
                artifactId = projectName
                packaging = 'jar'
                description = projectDescription
                url = projectURL

                scm {
                    connection = projectSCM
                    developerConnection = projectSCM
                    url = projectURL
                }

                licenses {
                    license {
                        name = 'MIT Licence'
                        url = projectLicense
                    }
                }

                developers {
                    developer {
                        id = developerID
                        name = developerName
                        email = developerEmail
                    }
                }
            }
        }
    }
}
